-- title

Making a Rust Directory Test Runner Marco


-- warning

This is an early scratch notes draft.

It's not yet complete. 


-- p


I've got a little format I use for testing
parsers. It works by putting each test in an
individual file in a test directory. The test
runner loops through it, running all the files. 

It works great except. Except for the part 
where the only thing I get when there's an error
is the index number of the file from 
the directory list. Finding the corresponding
file a pain. 

I wrote this macro to make 
functions with the filenames so it's
clear which one is which.

-- comment

This details section is closed by default
on the web page. I can't do that in this
README.neo file (yet). Feel free to skip
past it.


-- details/

    -- summary/

    Open For The Full Story

    -- /summary


The format I use to test parsers comes in 
two flavors. "txt":

-- code

txt_____hello_____

{
  ok: {
    ast: [
      {
        token: "text",
        string: "hello"
      }
    ]
  }
}

-- p

And, "json":


-- code

json_____

{ text: "  leading whitespace" }

_____

{
  ok: {
    ast: [
      {
        token: "whitespace",
        string: "  "
      }, 
      {
        token: "text",
        string: "leading whitespace"
      }
    ]
  }
}

-- p

Combined, they let me makes tests in
all the various ways I need to make sure
a parser is doing its thing properly. 





-- notes

- This is my first run at a macro. I like it. 


- Each test is in its own file. I'd been
running them with ``rstest`` and a few other
methods. The problem is they would all have
errors like ``case 32 failed``. I'd have to
figure out which file was 32. 

- Sure, I could have named the files with 
the numbers. That's always a pain. 

- Wrote this macro that takes a directory,
reads the files in it, splits them into
their parts, and sends them to the test
harness. 

- Probably there's already a crate that
does this. I didn't look hard beyond
rstest, test_case, and include_dir. 



-- ref
-- url: https://github.com/Michael-F-Bryan/include_dir/blob/master/macros/src/lib.rs

This is a repo where I saw an initial approach
for parsing the input to the macros. 


-- page
-- created: 2025-06-10T12:22:19-04:00
-- updated: 2025-06-10T12:22:19-04:00
-- id: 2y/k9/ks/vo
-- template: post
-- status: scratch
-- tag: rust


