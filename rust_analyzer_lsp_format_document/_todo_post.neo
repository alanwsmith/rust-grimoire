-- title

Rust Analyzer LSP Basic Test

-- h2

STATUS: Work-In-Progress

This isn't done yet.


-- notes

- Originally did tower_lsp. It hasn't been updated in a 
couple years though. I got pointed to rust analyzer's
lsp which this example is about. 

- Note that logging is only sent to STDERR. Sending 
it to STDOUT would freak out the client since
that's what it's connected to. 

- The initial code for this example came straight from
the [[example in the repo|https://github.com/rust-lang/rust-analyzer/blob/master/lib/lsp-server/examples/goto_def.rs]]

It uses Go To Definition. TODO: I updated it to format
the document. 


-- h2

Neovim Setup

-- code/
-- lua

-- LSP rust-grimoire testing
vim.lsp.config['rust_analyzer_lsp'] = {
cmd = { 
  '/Users/alan/workshop/rust-grimoire/rust_analyzer_lsp_format_document/target/debug/rust_analyzer_lsp_format_document' 
  },
  filetypes = {'lsptest', 'lsptest'},
}
vim.lsp.enable('rust_analyzer_lsp')
vim.filetype.add({
  extension = {
    lsptest = 'lsptest',
  }
})

-- /code

That sets up so that ``.lsptest`` files map to the
test LSP server with a direct path to the 
binary that's active when doing ``cargo run``

If you restart your cargo process you'll probably 
have to restart neovim to reconnect. This got 
tricky for me when I had files in the same directory
as the main rust project until I used a ``.ignore``
file to prevent ``cargo watch -x run`` from restarting
the process when they changed. 


You can check to make sure things are connected
by opening a file with a ``.lsptest`` extension,
dropping some content in it, saving it, and
then running:

-- code/

:LspInfo

-- /code

You should see something that looks like this:

-- code/

==============================================================================
vim.lsp:                                     require("vim.lsp.health").check()

- LSP log level : WARN
- Log path: /Users/alan/.local/state/nvim/lsp.log
- WARNING Log size: 232115 KB

vim.lsp: Active Clients ~
- rust_analyzer_lsp (id: 1)
  - Version: ? (no serverInfo.version response)
  - Root directory: nil
  - Command: { "/Users/alan/workshop/rust-grimoire/rust_analyzer_lsp_format_document/target/debug/rust_analyzer_lsp_format_document" }
  - Settings: {}
  - Attached buffers: 1

vim.lsp: Enabled Configurations ~
- rust_analyzer_lsp:
  - cmd: { "/Users/alan/workshop/rust-grimoire/rust_analyzer_lsp_format_document/target/debug/rust_analyzer_lsp_format_document" }
  - filetypes: lsptest, lsptest


vim.lsp: File Watcher ~
- file watching "(workspace/didChangeWatchedFiles)" disabled on all clients

vim.lsp: Position Encodings ~
- No buffers contain mixed position encodings


-- /code


The important part is the ``vim.lsp: Active Clients``
section. You'll see your stuff in there
if everything is wired up properly. 

If it didn't work you'll see

-- code/

vim.lsp: Active Clients ~
- No active clients

-- /code

You'll have to bughunt at that point. 

-- h2

Testing with Neovim

I tried to figure out how to test from the
command line. 

As far as I can tell there's no built-in or
straight forward way to do a ``cargo run``
and then send STDIN to it from another 
terminal. (Seems you can do it on 
linux machines with ``/proc/PID/fd/0``
but there's no ``/proc`` on macs as
far as I can tell)

So, I'm testing by configuring Neovim
as described above and just using it. 


-- h2

Neovim LSP Logging

Check this for logs:

-- code

:LspLog


-- p

NOTE: It looks like Neovim eats STDERR after
the initial connection. The output from:

-- code
-- rust

eprintln!("starting generic LSP server");

-- p

shows up, but the output from:

-- code
-- rust

eprintln!("starting example main loop");


-- p

does not. 








-- page
-- created: 2025-06-13T09:18:42-04:00
-- updated: 2025-06-13T09:18:42-04:00
-- id: 2y/sg/mn/sl
-- template: post
-- status: scratch



